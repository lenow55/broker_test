!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/lenow/clone_examples_from_github/broker_test/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220828.0/
Cache	web/react/src/interfaces.ts	/^export interface Cache {$/;"	i
Channel	internal/rabbit/conn.go	/^	Channel    *amqp.Channel$/;"	m	struct:rabbit.Conn	typeref:typename:*amqp.Channel
Close	internal/rabbit/conn.go	/^func (conn *Conn) Close() error {$/;"	f	struct:rabbit.Conn	typeref:typename:error
Config	internal/config/config.go	/^type Config struct {$/;"	s	package:config
Conn	internal/rabbit/conn.go	/^type Conn struct {$/;"	s	package:rabbit
Connection	internal/rabbit/conn.go	/^	Connection *amqp.Connection$/;"	m	struct:rabbit.Conn	typeref:typename:*amqp.Connection
DeclareTopicExchange	internal/rabbit/exchange.go	/^func (conn *Conn) DeclareTopicExchange(name string) error {$/;"	f	unknown:rabbit.Conn	typeref:typename:error
Exchange	internal/config/config.go	/^	Exchange string$/;"	m	struct:config.Config	typeref:typename:string
FormatDuration	internal/timeutil/timeutil.go	/^func FormatDuration(timestamp int64) string {$/;"	f	package:timeutil	typeref:typename:string
GetConn	internal/rabbit/conn.go	/^func GetConn(rabbitURL string) (*Conn, error) {$/;"	f	package:rabbit	typeref:typename:(*Conn, error)
KeyBack	internal/config/config.go	/^	KeyBack  string$/;"	m	struct:config.Config	typeref:typename:string
KeyFront	internal/config/config.go	/^	KeyFront string$/;"	m	struct:config.Config	typeref:typename:string
Message	internal/models/message.go	/^type Message struct {$/;"	s	package:models
Message	web/react/src/interfaces.ts	/^export interface Message {$/;"	i
MessageCache	web/react/src/interfaces.ts	/^export interface MessageCache extends Message {$/;"	i
New	internal/config/config.go	/^func New() *Config {$/;"	f	package:config	typeref:typename:*Config
Publish	internal/rabbit/publish.go	/^func (conn Conn) Publish(exch, rKey string, message []byte) error {$/;"	f	unknown:rabbit.Conn	typeref:typename:error
PublishInChannel	internal/rabbit/publish.go	/^func PublishInChannel(ch *amqp.Channel, exch, rKey string, message []byte) error {$/;"	f	package:rabbit	typeref:typename:error
QueueBack	internal/config/config.go	/^	QueueBack  string$/;"	m	struct:config.Config	typeref:typename:string
RabbitURL	internal/config/config.go	/^	RabbitURL   string$/;"	m	struct:config.Config	typeref:typename:string
ServerAddr	internal/config/config.go	/^	ServerAddr  string$/;"	m	struct:config.Config	typeref:typename:string
Source	internal/models/message.go	/^	Source string `json:"source"`$/;"	m	struct:models.Message	typeref:typename:string
StartConsumer	internal/rabbit/consume.go	/^func (conn *Conn) StartConsumer(exch, qName, rKey string, handler func(amqp.Delivery) bool) erro/;"	f	unknown:rabbit.Conn	typeref:typename:error
StartConsumerTemp	internal/rabbit/consume.go	/^func (conn *Conn) StartConsumerTemp(ctx context.Context, done chan<- bool, exch, rKey string, ha/;"	f	unknown:rabbit.Conn	typeref:typename:error
StartReader	internal/websocket/read.go	/^func StartReader(ctx context.Context, done chan<- bool, ws *websocket.Conn, handler func([]byte)/;"	f	package:websocket	typeref:typename:error
Text	internal/models/message.go	/^	Text   string `json:"text"`$/;"	m	struct:models.Message	typeref:typename:string
Time	internal/models/message.go	/^	Time   int64  `json:"time"`$/;"	m	struct:models.Message	typeref:typename:int64
alert	web/bootstrap/scss/style.scss	/^#notifications .alert{$/;"	c
conf	cmd/backend/backend.go	/^var conf = config.New()$/;"	v	package:main
conf	cmd/server/server.go	/^	conf     = config.New()$/;"	v	package:main
config	internal/config/config.go	/^package config$/;"	p
count	web/react/src/interfaces.ts	/^  count: number;$/;"	p	interface:Cache
fibonacciRecursive	cmd/server/api.go	/^func fibonacciRecursive(n int) int {$/;"	f	package:main	typeref:typename:int
filesStatic	cmd/server/server.go	/^var filesStatic embed.FS$/;"	v	package:main	typeref:typename:embed.FS
filesTempl	cmd/server/server.go	/^var filesTempl embed.FS$/;"	v	package:main	typeref:typename:embed.FS
getEnv	internal/config/config.go	/^func getEnv(key string, defaultVal string) string {$/;"	f	package:config	typeref:typename:string
handleFibonachi	cmd/server/api.go	/^func handleFibonachi(w http.ResponseWriter, r *http.Request) {$/;"	f	package:main
handleHome	cmd/server/server.go	/^func handleHome(w http.ResponseWriter, r *http.Request) {$/;"	f	package:main
handleMessages	cmd/server/server.go	/^func handleMessages(cr *redis.Client) func(w http.ResponseWriter, r *http.Request) {$/;"	f	package:main	typeref:typename:func(w http.ResponseWriter, r *http.Request)
handleNotFound	cmd/server/server.go	/^func handleNotFound(w http.ResponseWriter) {$/;"	f	package:main
handlePublishRabbit	cmd/server/server.go	/^func handlePublishRabbit(ch *amqp.Channel) func(msg []byte) error {$/;"	f	package:main	typeref:typename:func(msg []byte) error
handleWebsocket	cmd/server/server.go	/^func handleWebsocket(w http.ResponseWriter, r *http.Request, conn *rabbit.Conn) {$/;"	f	package:main
handleWebsocketConn	cmd/server/server.go	/^func handleWebsocketConn(conn *rabbit.Conn) func(w http.ResponseWriter, r *http.Request) {$/;"	f	package:main	typeref:typename:func(w http.ResponseWriter, r *http.Request)
handleWriteWebsocket	cmd/server/server.go	/^func handleWriteWebsocket(ws *websocket.Conn) func(d amqp.Delivery) error {$/;"	f	package:main	typeref:typename:func(d amqp.Delivery) error
input-btn-focus-width	web/bootstrap/scss/style.scss	/^$input-btn-focus-width: 0rem;$/;"	v
iwebsocket	cmd/server/server.go	/^	iwebsocket "github.com\/ebosas\/microservices\/internal\/websocket"$/;"	P	package:github.com/ebosas/microservices/internal/websocket
main	cmd/backend/backend.go	/^func main() {$/;"	f	package:main
main	cmd/backend/backend.go	/^package main$/;"	p
main	cmd/server/api.go	/^package main$/;"	p
main	cmd/server/server.go	/^func main() {$/;"	f	package:main
main	cmd/server/server.go	/^package main$/;"	p
messages	web/react/src/interfaces.ts	/^  messages: MessageCache[];$/;"	p	interface:Cache
models	internal/models/message.go	/^package models$/;"	p
notifications	web/bootstrap/scss/style.scss	/^#notifications .alert{$/;"	i
notifications	web/bootstrap/scss/style.scss	/^#notifications{$/;"	i
printMessages	cmd/backend/backend.go	/^func printMessages(d amqp.Delivery) bool {$/;"	f	package:main	typeref:typename:bool
publishInput	cmd/backend/backend.go	/^func publishInput(c *rabbit.Conn) {$/;"	f	package:main
rabbit	internal/rabbit/conn.go	/^package rabbit$/;"	p
rabbit	internal/rabbit/consume.go	/^package rabbit$/;"	p
rabbit	internal/rabbit/exchange.go	/^package rabbit$/;"	p
rabbit	internal/rabbit/publish.go	/^package rabbit$/;"	p
renderResponse	cmd/server/api.go	/^func renderResponse(w http.ResponseWriter, res interface{}, status int) {$/;"	f	package:main
source	web/react/src/interfaces.ts	/^  source: string;$/;"	p	interface:Message
success	web/bootstrap/scss/style.scss	/^$success: #4254B8;$/;"	v
text	web/react/src/interfaces.ts	/^  text: string;$/;"	p	interface:Message
time	web/react/src/interfaces.ts	/^  time: number;$/;"	p	interface:Message
timefmt	web/react/src/interfaces.ts	/^  timefmt: string;$/;"	p	interface:MessageCache
timeutil	internal/timeutil/timeutil.go	/^package timeutil$/;"	p
total	web/react/src/interfaces.ts	/^  total: number;$/;"	p	interface:Cache
upgrader	cmd/server/server.go	/^	upgrader = websocket.Upgrader{} \/\/ use default options$/;"	v	package:main
websocket	internal/websocket/read.go	/^package websocket$/;"	p
